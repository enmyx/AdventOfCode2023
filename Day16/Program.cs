using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Day16
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var sinput = ".|...\\....\r\n|.-.\\.....\r\n.....|-...\r\n........|.\r\n..........\r\n.........\\\r\n..../.\\\\..\r\n.-.-/..|..\r\n.|....-|.\\\r\n..//.|....";
            var input = "\\....../.-...--.|....\\../.......|......|.\\......../..................|......|......................|..........\r\n...................|........../.........-..................................../\\|....|.........................\r\n................/..../.........\\.....-.................................../................./...............|..\r\n..........|.....................\\......-..-...|......-|..............|.......\\.........|...........--.......|.\r\n.\\................................................/............../...|......|............-...................-\r\n.......................|..................-..|...\\...|...................................|.......-......../...\r\n...................................../.....|....|...-................-........\\....-..........................\r\n.......--.....-.....-.-......\\..../....|........\\......../..|...................../...........................\r\n.................-......\\......../.....-|..............|....-........-....\\......|...-.......-....../.........\r\n...........|......-.............\\.../.........\\...........|.....-...../....................../.........|-.....\r\n...................../........|...-.......-.............../\\\\...../..\\...........................\\............\r\n........|.............................................................-....|.........-........-..../.....|....\r\n....././...-.......|...../........../.|..\\.....||.............................|............\\..................\r\n......\\...|.....|..........................-......|.....-........................................./..|.......|\r\n..|../....|..-.-............-..../|.\\........................-../...\\............................-\\..|..-.....\r\n.|..|....\\........\\.|.-....\\....................\\...\\......../....................../..//...|.....//..-./.....\r\n....................|.............../...|..|.|......./..........................-..............|..|.../.......\r\n........\\.................|/.......-...........|/....|.../.|.\\...................-...........|.............|..\r\n.........-..|.............\\.../....|/.................|/.............\\........-..................|...|........\r\n......../........|......\\...................|.....\\.\\.................\\......\\.........|..................\\...\r\n.......\\...................|........./...................|.....|......./..../.|.|...-....|........../.........\r\n...............\\.|..\\......./.....\\....../..............\\..\\...../......\\...-.........../\\...........-........\r\n......................-.....|......../............../......|.......\\..../.............../.../.......|....../..\r\n..............-.\\/\\.\\....................-...\\.....................\\-../.....\\..........\\...../......./.......\r\n......./...../....\\......../........\\..|.................-...................-..........-............../......\r\n.....|..|....|...||.|..../...\\......\\.|........\\...../......................................|..\\..............\r\n........-....\\........./......|....../.../.......-...................................-|.......................\r\n...................../...../.......................-........\\.........\\..|./...../.....-..........\\...........\r\n...../........\\\\.\\\\........................-..-....................\\-.|.|-.........................\\..........\r\n......................./...........................-.........../.........................../........-/.../....\r\n......-........................./...\\........................\\....|.../..|../..........-................./....\r\n..-..................-............\\........../.......\\................................................./......\r\n.../...................|...-.../........................|-.-......./..................-.............\\.........\r\n....\\...../............../............................-..............-../..........-.....--...................\r\n...-.......-...\\...../...............................\\................................................|.......\r\n............-.......................\\.-\\.....\\..............\\............-.........\\..../\\...\\...-..........\\.\r\n\\.............|...../\\...../....../..........|./...../.......................-..................-.\\...........\r\n.-..................-.....-..\\..........|..............\\..-......-...........//./...-..\\.......-../...........\r\n..............|..\\..-...\\....|.........................-..|...|/.........................-./....../\\..|.....-.\r\n...|....\\.-...................|.|..................-.....\\../..............\\............/..........-..........\r\n........../.....|............./............................................|..-......|\\.........-........-/.|.\r\n....|../........\\..................|...\\.........\\./....|....-.........-...\\....|............................-\r\n-.....................|\\............/............\\...................-.|........-........../..................\r\n-...|.../....-...../...../............\\.................|........................|.......|-...............\\-..\r\n..\\....................../.\\..\\.....|.............-.....-....-./......-../..................\\.................\r\n../...............|...-..\\./.....-....................../................\\............-........../.........|..\r\n...|.........\\......\\.........-..-.|......\\...............-......-..............\\..........-\\......\\..........\r\n..|...................\\..|.....\\.......\\...................\\............................................/.....\r\n|..|.../.....|..../.......-..................\\......../......../.........-....................................\r\n.....\\.......................-...\\..\\.......|........\\.............\\...|......./-\\..........|.....-.\\.........\r\n.............................|/|.|.-............./.......|..../.........\\\\..-.|....|...../.......-..........|.\r\n........|..../.............\\.../\\...............................................................|.............\r\n..\\.-|......|..........................|........./........-..................-......./..........|...-.......\\.\r\n/........|....\\....../..........||...................|.|...|....................-.|.......\\|.\\................\r\n............./.......................-..\\\\.|.../.....|....................\\../................................\r\n..................\\..................../...........|........\\.|........../........./........||.......-/.\\.....\r\n........\\....-...|..|.......-...-..........................--.......\\.../..\\.................\\................\r\n....-....\\......|..../.../......//|...........................|............./.-.|.........\\/.|..-............\\\r\n-....\\..../....................|..\\.............\\.........-.....\\..|.-.\\.......-.........|..\\.....-...........\r\n........../......\\...........././.....-.....|................|.............-|............./...|.......\\-......\r\n.................-../............-..............................................-...\\.........................\r\n\\.....|...................|.../........-..................\\.....\\/........-...................................\r\n......\\......................./................-.........\\...-.....-.....|............./...........-..\\....\\..\r\n......-..//....-........../.............\\....\\.\\.........\\...................\\..\\.............................\r\n|.............-................-......................./.............................\\..-.....\\............/..\r\n..........|..........................-.|............\\......-........\\..\\.|......|.-........................../\r\n...................|.............-......../..-...............\\......../................/..........-\\/|..\\.....\r\n..../|.|............................./......../.|.\\.-.................-............\\........|-..-.............\r\n./............../.........-........|.|......|................-.|................/..............\\..............\r\n.........-........\\..............|/............/....-..../.../.........|.........................\\............\r\n.................../.|.\\.-....|................................|................./-........-..................\r\n....................\\.......\\.........//..........-.../..|.....-..-................./...-.....-...............\r\n...........|/.\\..-........./...........|.-......-...................................../...................\\...\r\n......|....|...........\\....-..................-...............-|............-./...............|.......|.....\\\r\n..............\\...-............/...............|..../....\\\\../................................/...........-...\r\n../............|..../...................-........-.................|............./..\\../....\\..-....\\..\\......\r\n.............\\...-..............|............/..........................-...................................|.\r\n.........|...................../....-..........|........./.........|.....-......../..|..............-..../....\r\n.....................\\...................../\\.................\\....../........./..............\\.........|.....\r\n..................................\\./.-........................|......\\.................../...-......\\-.......\r\n.......|.......................|............................-.........................../.....................\r\n......\\...............-......\\...........................|........................./.-........../..../....\\...\r\n.../....-|.......-........../..........-......\\.............|..-.../.......\\.../..../..................-......\r\n........./.............\\....-..-...\\..--...|.-..-.|...-....-.....\\................-/.........|.............-\\.\r\n...........|.............\\.............\\.....|....|.--............|...|.|.............................-/......\r\n../.............|........|................./\\..|....../.............|\\............\\.........\\.......|.......|.\r\n-...........-..................-........\\...............................-\\...................\\|......|........\r\n..................../.......-..-...............\\..........\\..........................................\\...../|.\r\n........|........./.......-\\.......|............|............../............../......-.....|..................\r\n...........-..........//.....|............\\...\\................/.........-...-./..|......................-\\...\r\n/\\........./.|..............|..........|..................-|-.........|........................-..|\\.\\.-......\r\n............./....../..........|//.....-.....-.../....................|.......\\.......-........-...........|..\r\n......................./..........\\............./....................\\.........-......-\\...|..................\r\n.......................-..../../..................-.........-........................\\..............|.........\r\n........|..../..../..-|................|.../..........|...........-................\\...............-..........\r\n.........|.......\\.........................\\....|..............\\......\\....-............................/....-\r\n...........\\..........|................................./....................../..............................\r\n........................../.-....................\\........................-......|.......|.....-../...........\r\n.............\\..-|........-.\\|....\\............./......\\.................|.........\\.-......................./\r\n.....--...........\\.............\\../.....\\................................./....-.........|............./.../.\r\n............................|........................\\......|/........|...................../.................\r\n.../..|.......................................-.....|.../........................./...-.......................\r\n.|.../../.........-....................-.................../..-......-....|................\\..................\r\n......|.....|-....\\./.....\\.........../.............../...............\\...\\....\\......-.\\....-...\\-...-./|.../\r\n|.|......./...-....\\....\\|\\...\\......\\..\\.......././.........\\........-.....-.........././-....-...-\\.........\r\n.......\\.|...../.../...../.........\\..|./.................\\..-\\.........\\.....|...|.......-...............-/..\r\n............/.-.....................\\......./..|................................../|........./.........|..-..|\r\n.../..............././..\\.\\............|...-.|................/..-..-.........-......-.......//...............\r\n.....\\...\\-...\\.......................-|.........|...-|...........\\.........|.....\\|...\\............-......./.\r\n........|./......|\\.................\\....|\\.................-.../........./..............\\-.....-....../....-.";

            var lines = input.Replace("\r\n", "\n").Split('\n').ToList();

            var map = new char[lines.Count, lines[0].Length];
            for (int i = 0; i < lines.Count; i++)
                for (int j = 0; j < lines[i].Length; j++)
                    map[i, j] = lines[i][j];

            int max = 0;
            for (int i = 0; i < map.GetLength(1); i++)
            {
                int energizedDown = EnterBeam(map, (i, 0, Direction.Down));
                int energizedUp = EnterBeam(map, (i, map.GetLength(0) - 1, Direction.Up));
                max = Math.Max(max, Math.Max(energizedUp, energizedDown));
            }
            for (int i = 0; i < map.GetLength(0); i++)
            {
                int energizedRight = EnterBeam(map, (0, i, Direction.Right));
                int energizedLeft = EnterBeam(map, (map.GetLength(1) - 1, i, Direction.Left));
                max = Math.Max(max, Math.Max(energizedLeft, energizedRight));
            }
            Console.WriteLine(max);
        }

        private static int EnterBeam(char[,] map, (int x, int y, Direction direction) enter)
        {
            var energized = new Dictionary<(int x, int y), List<Direction>>();
            var beams = new Dictionary<int, (int x, int y, Direction direction)>
            {
                { 0, enter }
            };
            int nextBeam = 1;

            while (beams.Any())
            {
                foreach (var beam in beams.ToList())
                {
                    int x = beam.Value.x;
                    int y = beam.Value.y;
                    Direction direction = beam.Value.direction;
                    if (energized.ContainsKey((x, y)))
                    {
                        if (energized[(x, y)].Contains(direction))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                    }
                    else
                    {
                        energized[(x, y)] = new List<Direction>();
                    }
                    energized[(x, y)].Add(direction);

                    if (map[y, x] == '.' ||
                        (map[y, x] == '-' && (direction == Direction.Left || direction == Direction.Right)) ||
                        (map[y, x] == '|' && (direction == Direction.Up || direction == Direction.Down)))
                    {
                        switch (direction)
                        {
                            case Direction.Left:
                                x--;
                                break;
                            case Direction.Right:
                                x++;
                                break;
                            case Direction.Up:
                                y--;
                                break;
                            case Direction.Down:
                                y++;
                                break;
                        }
                        if (PositionInvalid(x, y, map))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                        beams[beam.Key] = (x, y, direction);
                    }
                    else if ((map[y, x] == '/' && direction == Direction.Right) ||
                        (map[y, x] == '\\' && direction == Direction.Left))
                    {
                        y--;
                        direction = Direction.Up;

                        if (PositionInvalid(x, y, map))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                        beams[beam.Key] = (x, y, direction);
                    }
                    else if ((map[y, x] == '\\' && direction == Direction.Right) ||
                        (map[y, x] == '/' && direction == Direction.Left))
                    {
                        y++;
                        direction = Direction.Down;

                        if (PositionInvalid(x, y, map))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                        beams[beam.Key] = (x, y, direction);
                    }
                    else if ((map[y, x] == '/' && direction == Direction.Down) ||
                        (map[y, x] == '\\' && direction == Direction.Up))
                    {
                        x--;
                        direction = Direction.Left;

                        if (PositionInvalid(x, y, map))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                        beams[beam.Key] = (x, y, direction);
                    }
                    else if ((map[y, x] == '\\' && direction == Direction.Down) ||
                        (map[y, x] == '/' && direction == Direction.Up))
                    {
                        x++;
                        direction = Direction.Right;

                        if (PositionInvalid(x, y, map))
                        {
                            beams.Remove(beam.Key);
                            continue;
                        }
                        beams[beam.Key] = (x, y, direction);
                    }
                    else if (map[y, x] == '-' && (direction == Direction.Up || direction == Direction.Down))
                    {
                        x++;
                        direction = Direction.Right;

                        if (PositionInvalid(x, y, map))
                            beams.Remove(beam.Key);
                        else
                            beams[beam.Key] = (x, y, direction);

                        int newY = y;
                        int newX = x - 2;
                        Direction newDirection = Direction.Left;
                        if (!PositionInvalid(newX, newY, map))
                            beams.Add(nextBeam++, (newX, newY, newDirection));
                    }
                    else if (map[y, x] == '|' && (direction == Direction.Left || direction == Direction.Right))
                    {
                        y++;
                        direction = Direction.Down;

                        if (PositionInvalid(x, y, map))
                            beams.Remove(beam.Key);
                        else
                            beams[beam.Key] = (x, y, direction);

                        int newY = y - 2;
                        int newX = x;
                        Direction newDirection = Direction.Up;
                        if (!PositionInvalid(newX, newY, map))
                            beams.Add(nextBeam++, (newX, newY, newDirection));
                    }
                }
            }

            return energized.Keys.Count;
        }

        private static bool PositionInvalid(int x, int y, char[,] map)
        {
            return x < 0 || y < 0 || x >= map.GetLength(1) || y >= map.GetLength(0);
        }
    }

    enum Direction
    {
        Up, Down, Left, Right
    }
}
